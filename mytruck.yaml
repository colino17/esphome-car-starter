# This YAML file contains generic placeholder info. See comments below regarding changes that you will need.
# https://esphome.io/index.html

esphome:
# These three categories as well as the basic wifi information will be generated by running "esphome projectname.yaml wizard". Enter your project name, platform (ESP8266 or ESP32) and board (I recommend an ESP8266 based board with USB inputs such as a D1 Mini or NodeMCU board).
  name: mytruck
  platform: ESP8266
  board: d1_mini

# Once again, basic wifi information is generated by the wizard. Enter your network name, and network password.
wifi:
  ssid: MyNetwork
  password: MyPassword
# Entering a manual IP can be useful for troubleshooting as you can avoid having your DHCP server (usually your router) assign different IPs to your device by choosing a static IP.
  manual_ip:
    static_ip: 192.168.0.40
    gateway: 192.168.0.1
    subnet: 255.255.255.0

# This line activates the native API for HomeAssistant integration. Alternatively you could exclude this and include MQTT connectivity instead. The API also allows for a password.
api:
  password: MyAPIPassword

# This line allows you to push OTA updates to your device in the future. Useful if your device is in a difficult to access location.
ota:
  safe_mode: True
  password: MyOTAPassword

# Basic error logging.
logger:

# The actual switch.
switch:
# The first platform defines the pins that are used for the fob switches. I used D0 which is GPIO16 on the D1 Mini board. A quick google of your board pinout can be useful here if you are having trouble.
  - platform: gpio
    pin: 16
    id: start
    restore_mode: ALWAYS_OFF
# The template platform uses the GPIO switch with the ID above ("start") to create a momentary switch that "holds the button down" for a set period of time before releasing. In this case I used 4 seconds as my fob requires the button to be held for at least 3 seconds to start the vehicle. 
  - platform: template
    name: "My Truck"
    icon: "mdi:car"
    turn_on_action:
    - switch.turn_on: start
    - delay: 4000ms
    - switch.turn_off: start
